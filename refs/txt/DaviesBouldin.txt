function DB_index = DaviesBouldin(X, IDX, C) 
%	===================================================== 
%	Reference: 
%	--------------------------------------------------------------------------------
%	Davies, D.L., and Bouldin, D.W. (1979). A cluster separation measure. 
%	IEEE Transactions on Pattern Analysis and Machine Intelligence,
%	PAMI-1, 2, 224-227.. 
%	====================================================== 
%	Inputs: 
%	--------------------------------------------------------------------------------
%	X		: Matrix used for clustering  
%	IDX		: Cluster labels from clustering output 
%	C		: Cluster centroids 
%	====================================================== 
%	Outputs: 
%	--------------------------------------------------------------------------------
%	DB_index		: Validity criterion 
%	======================================================
%	Number of Clusters, Total Data Points, Points in Each Cluster:
%	--------------------------------------------------------------------------------
%	k = no. of clusters	
	k = length(unique(IDX));
%
%	NOBS = total no. of data points
	NOBS = length(X);
%
%	N(i) = no. of points in each cluster
	for i= 1:k;
		N(i) = length(find(IDX==i));
	end;	
%	=====================================================
%	del(i) = average distance between each point in the i-cluster and
%	the centroid of the i-cluster 
%	--------------------------------------------------------------------------------
	for i = 1:k;
		[rows,~] = find(IDX==i);
		clust = X(rows);
		del(i) = sum(pdist2(clust,C(i)))/N(i);
	end;
%	======================================================
%	For each pair of clusters i and j, calculate the quotient
%	(del(i) + del(j))/delta_ij; where delta_ij  is the distance between the 
%	centers of clusters i and j.  For each cluster, M(i) is the maximum of
	these quotients .
%	---------------------------------------------------------------------------------
	M = zeros(k,1);
	for i = 1:k;
		for j = i+1:k;
			temp = (del(i) + del(j))/(C(i)-C(j))
			if temp > M(i)
				M(i) = temp;
			end;
		end;
	end;
%	======================================================
	DB Index
%	---------------------------------------------------------------------------------
	DB_index = sum(M)/k;
%	======================================================
end;